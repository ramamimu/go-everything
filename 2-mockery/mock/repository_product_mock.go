// Code generated by MockGen. DO NOT EDIT.
// Source: 2-mockery/product/product.go

// Package mock_product is a generated GoMock package.
package mocker

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryProduct is a mock of RepositoryProduct interface.
type MockRepositoryProduct struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryProductMockRecorder
}

// MockRepositoryProductMockRecorder is the mock recorder for MockRepositoryProduct.
type MockRepositoryProductMockRecorder struct {
	mock *MockRepositoryProduct
}

// NewMockRepositoryProduct creates a new mock instance.
func NewMockRepositoryProduct(ctrl *gomock.Controller) *MockRepositoryProduct {
	mock := &MockRepositoryProduct{ctrl: ctrl}
	mock.recorder = &MockRepositoryProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryProduct) EXPECT() *MockRepositoryProductMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockRepositoryProduct) AddProduct(ctx context.Context, productID string, amount uint, price float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, productID, amount, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockRepositoryProductMockRecorder) AddProduct(ctx, productID, amount, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockRepositoryProduct)(nil).AddProduct), ctx, productID, amount, price)
}
